DoS
volumetric attack: consume the bandwidth, shrew attack
Example: coremelt and Crossfire
coremelt: exhaust bandwidth on victim link
crossfire: overload target links to disconnect target region from remainder of Internet
nameserver can no longer reply to legitimate requests

protocol attack: exhaust certain device, SYN/ACK floods(server keeps state(A+1,B))->mitigation: SYN cookie
Example: DNS flooding-NXDOMAIN Attack
goal: overwhelm victim's authoritative name servers
Idea: query many non-existent subdomains of victim domain
Example: Session State Exhaustion
SYN/ACK floods(server keeps state(A+1,B))->mitigation: SYN cookie
countermeasure:cookie, no need to store session state, ensure encoding(cookie generation func) cannot be tampered
B=Hash(salt,A), salt is only known to server and keep changing

application layer attack: application request floods, database connection pool exhaustion
-Example: Algorithmic complexity
induce worst-case behavior in a vulnerable algo
larger the difference between best case and worst case, more vulnerable
Hash table lookup:collisions->countermeasures: universal hashing(hash func guarantee no collision), hash ramdomization(harder to find worst case input)
due to small table size->solution: chaining, open addressing
-Example: regular expression denial of service(ReDoS)
-Example: Slowloris
keep many connections to target web server open and hold them open
send partial request, subsequent HTTP header, but never complete->fill the maximum connection pool
Mitigation to Slowloris: increase maximum number of clients; limit number of connections from same ip; require minimum transfer speed per connection; restrict the length of tme staying connected

Mitigations to IoT attack
-patch
-no hardcoded credentials, force user to change pwd
-ISP monitor network for suspicious traffic

defense agaist ip spoofing
-address filtering by ISPs->problem: no profit to do for ISP
-use connection-based protocols, eg.TCP ->problem: latency, memory and computation, state exhaustion DoS
-cryptographic source authentication->problem: DoS on asymmetric crypto, require symmetric key distribution or PKI

reflection and amplication: ip spoofing, send request to open server, larger or more response to victim
Mitigation to reflection and amplication
-prevent address spoofing
-perform access control
-response rate limiting
-small amplication factor

temporal lensing
-arrive at victim at the same time->trigger packet drop-> trigger retransmission wait->shrew attack

IP spoofing defense
-ingress filtering: gateway device(router, firewall, NAT) drop packets with invalid ip
pros: eliminate ip spoofing
cons: source-based solution, no deployment incentives
-iTrace: one in 20000 packets triggers a router to send a special packet with route information
pros: DDoS victim can reconstruct "attack" path
cons: extra packet waste bandwidth
-packet marking: routers mark 16-bit IP ID field with information that enables reconstruction of IP address(verification)
pros: no extra overhead
cons: probablistic marking requires ~1000 packets(to find attack source)

DDoS denfense 
-ingress filtering: remove packets from illegitimate source IP
-computational puzzle: slow down attack
-cloud- or ISP-based filtering
-network capability: allow victim block unwanted traffic closer to source
-IP traceback
-over provisioning(based on past data, predict)
-remotely triggered black hole(RTBH) filtering: update BGP rule to drop malicious traffic in border routers
